# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Test, Build, and Push

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_FRONTEND: purdue-course-finder
  ECR_REPOSITORY_BACKEND: purdue-course-finder-backend

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      working-directory: ./backend
      run: mvn -B package --file pom.xml
  build-and-push:
    needs: test
    name: Build and Push

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build --build-arg BACKEND_URL="http://purdue-course-finder.us-east-2.elasticbeanstalk.com:8443"  --build-arg REACT_APP_MAPS_API_KEY="${{ secrets.REACT_APP_MAPS_API_KEY }}"" -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./frontend/purdue-course-finder
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest"
        
    - name: Build, tag, and push backend image to Amazon ECR
      id: build-image2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest"
